{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week1.md?vue&type=template&id=65d8d518&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week1.md","mtime":1600135912139},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1600070946946},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":1600070946945},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":1600070943655}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxDb250ZW50U2xvdHNEaXN0cmlidXRvciA6c2xvdC1rZXk9IiRwYXJlbnQuc2xvdEtleSI+PGgxIGlkPSJ3ZWVrLTEtZmFudGFzeS1kZXZpY2UiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjd2Vlay0xLWZhbnRhc3ktZGV2aWNlIj4jPC9hPiBXZWVrIDEgRmFudGFzeSBEZXZpY2U8L2gxPgo8ZGl2IGNsYXNzPSJjdXN0b20tYmxvY2sgdGlwIj48cCBjbGFzcz0iY3VzdG9tLWJsb2NrLXRpdGxlIj5EZXZpYXRlZCBmcm9tIEdyb3VwIElkZWE8L3A+CjxwPk91ciBncm91cCB3YXMgc2hvcnQgb24gdGltZSBkdXJpbmcgdGhlIGRpc2N1c3Npb24gdGltZSBkdWUgdG8gWm9vbSBjb25uZWN0aW9uIGlzc3VlLiBDb3VwbGUgb2YgZGF5cyBhZ28sIHdoZW4gSSBkbyBteSBkaXNoZXMsIEkgY2FtZSB1cCB3aXRoIHRoaXMgaWRlYS4gSSBob3BlIGl0J3Mgb2theSB0byBkZXZpYXRlIGZyb20gb3VyIGdyb3VwIGlkZWEuPC9wPgo8L2Rpdj4KPGgyIGlkPSJhdXRvLWxvYWQtdW5sb2FkLWRpc2h3YXNoZXIiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjYXV0by1sb2FkLXVubG9hZC1kaXNod2FzaGVyIj4jPC9hPiBBdXRvIExvYWQgLSBVbmxvYWQgRGlzaHdhc2hlcjwvaDI+CjxoMyBpZD0ic2tldGNoIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3NrZXRjaCI+IzwvYT4gU2tldGNoPC9oMz4KPHA+PGltZyBzcmM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvRmFudGFzeURldmljZS5qcGVnIiBhbHQ9IiI+PC9wPgo8aDMgaWQ9Im1haW4tZnVuY3Rpb25zIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI21haW4tZnVuY3Rpb25zIj4jPC9hPiBNYWluIEZ1bmN0aW9uczwvaDM+Cjx1bD4KPGxpPk9uIHRoZSB1cHBlciBzaWRlIG9mIHRoZSBkaXNod2FzaGVyIGRvb3IsIHlvdSBjYW4gZmVlZCB0aGUgcGxhdGUgaW4gbGlrZSB5b3UgZmVlZCBDRCB0byB0aGUgQ0QgcGxheWVyPC9saT4KPGxpPldoZW5ldmVyIHlvdSBuZWVkIGEgcGxhdGUsIHNpbXBseSBwcmVzcyB0aGUgREVMT0FEIERJU0ggYnV0dG9uLCBhbmQgaXQgd2lsbCBmZWVkIHlvdSBhIG5ldyBvbmU8L2xpPgo8bGk+VGhlIGRldGVyZ2VudCB3aWxsIG5vdyBwdXQgaXQgZnJvbSB0aGUgdXBwZXIgc2lkZSBvZiB0aGUgbWFjaGluZSwgc28geW91IGRvbid0IGhhdmUgdG8gYmVudCBvdmVyIHRvIHJlYWNoIGl0PC9saT4KPGxpPkluc2lkZSwgdGhlIHVwcGVyIGxldmVsIGhhcyBob29rcy9jbGF3cyB0byBhdXRvbWF0aWNhbGx5IGxvYWQgYW5kIGRlbG9hZCB0aGUgcGxhdGUgZm9yIHlvdTwvbGk+CjxsaT5UaGUgbG92ZXIgbGV2ZWwsIHlvdSBjYW4gc3RpbGwgdXNlIGFzIG5vcm1hbCBkaXNoIHdhc2hlcjwvbGk+CjwvdWw+CjxoMyBpZD0ic3RvcnktYmVoaW5kLWl0Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3N0b3J5LWJlaGluZC1pdCI+IzwvYT4gU3RvcnkgQmVoaW5kIGl0PC9oMz4KPHA+VGhlIGRpc2h3YXNoZXIgaXMgbm90IGNvbW1vbiBpbiBhIENoaW5lc2UgZmFtaWx5LiBHcm93aW5nIHVwLCB3YXNoaW5nIGRpc2hlcyBpcyBhbHdheXMgcGFydCBvZiBtZSBhbmQgbXkgbW9tJ3Mgam9iIGJlY2F1c2UgbXkgZGFkIGlzIHRoZSBjaGllZi48L3A+CjxwPldoZW4gSSBmaXJzdCBhcnJpdmVkIGluIHRoZSBVLlMuIGFuZCBnb3QgbXkgb3duIGFwYXJ0bWVudC4gSSBuZXZlciB1c2UgbXkgZGlzaHdhc2hlciBmb3IgYSB2ZXJ5IGxvbmcgdGltZSBiZWNhdXNlIEkgZG9uJ3Qga25vdyBob3cgdG8gdXNlIGl0LiAoSSBkb24ndCBldmVuIGtub3cgd2hhdCBkZXRlcmdlbnQgaXMpIEkgdXNlIHRoZSBkaXNod2FzaGVyIGFzIGFuIGV4dHJhIHBsYWNlIHRvIGRyYWluIGFuZCBkcnkgb3V0IG15IGdsYXNzd2FyZS4gSSB2aXNpdGVkIG15IGZyaWVuZHMnIGhvdXNlLCBhbmQgaGUgdGF1Z2h0IG1lIGhvdyB0byBsb2FkIHRoZSBwbGF0ZSBwcm9wZXJseS4gSGUgZXZlbiBnYXZlIG1lIGEgZmV3IGRldGVyZ2VudCBibG9ja3MgdG8gbGV0IG1lIHRyeSBpdCBvdXQuPC9wPgo8cD5UaGUgZmlyc3QgdGltZSB3aGVuIG15IGRpc2hlcyBpcyByZWFkeSBhbmQgY2xlYW4sIEkgV293ZWQgbGlrZSBDYXZlIE1hbiBtZXQgdGhlIG5ldyBpUGhvbmUuIEkgYnJhZ2dlZCBpdCB3aXRoIG15IG1vbSBhbmQgc2hvd2VkIGhlciBob3cgZWZmb3J0bGVzc2x5IHRvIHdhc2ggdGhlIGRpc2hlcy4gQW5kIHRoZXJlIGFyZSBhIGZldyBwcm9ibGVtcyBJIGhhdGUgYWJvdXQgdXNpbmcgdGhlIGRpc2h3YXNoZXI6PC9wPgo8dWw+CjxsaT5XaGVuIEkgaGF2ZSBsb3dlciBiYWNrIHBhaW4sIHRoZSBsYXN0IHRoaW5nIEkgd2FudCB0byBkbyBpcyBiZW5kIG92ZXIgYW5kIHB1dCBkZXRlcmdlbnQgdGhlcmU7IHdoeSBpdCBjYW4ndCBsb2FkIGZpdmUgZGV0ZXJnZW50cyBhdCB0aGUgc2FtZSB0aW1lPzwvbGk+CjxsaT5JIGhhdGUgbG9hZCBkaXNoZXMsIGFuZCBzb21ldGltZXMgSSBsb2FkIGl0IHdyb25nLCBzbyB0aGVyZSBhbHdheXMgc29tZSBkaXNoZXMgdGhhdCBhcmUgbm90IGNsZWFuZWQgcHJvcGVybHkuPC9saT4KPGxpPkkgaGF0ZSB0byB1bmxvYWQgdGhlIGRpc2hlcy4gRGlzaHdhc2hlciBzcG9pbGVkIG1lIG5vdCB0byB3YXNoIGRpc2hlcywgd2h5IG5vdCBzcG9pbCBtZSBhIGxpdHRsZSBiaXQgbW9yZT8gQ291bGQgSSBsb2FkIGFuZCB1bmxvYWQgdGhlIGRpc2ggZm9yIG1lPzwvbGk+CjwvdWw+CjxwPkhlbmNlLCBJIGNyZWF0ZSBhbmQgc2tldGNoZWQgdGhpcyBpZGVhIG9mIGF1dG9sb2FkLyB1bmxvYWQgZGlzaHdhc2hlci4gVGhlIGluc3BpcmF0aW9uIGlzIGNvbWluZyBmcm9tIHRoZSBDRFJPTSBvbiBjYXJzIG9yIGdhbWluZyBjb25zb2xlLiBZb3UgcHVzaCB0aGUgZGlzayBpbiwgYW5kIHRoZSBtYWNoaW5lIHdpbGwgdGFrZSBpdCBpbnNpZGUuIEFsc28sIHRoZXJlIHdpbGwgYmUgIGEgYnV0dG9uIHRoZXJlLiBXaGVuIHRoZSBkaXNod2FzaGVyIGZpbmlzaGVkIGl0cyB3YXNoaW5nIGN5Y2xlLCB0aGUgTEVEIGluZGljYXRlcyB0aGUgZGlzaCBpcyBjbGVhbiwgYW5kIGl0IHdpbGwgbGV0IHlvdSBrbm93IGhvdyBtYW55IGRpc2hlcyBhcmUgbGVmdCBpbnNpZGUgaXQuIFByZXNzaW5nIHRoYXQgYnV0dG9uIHdpbGwgdW5sb2FkIHRoZSBwbGF0ZSBmb3IgeW91LjwvcD4KPHA+QW5vdGhlciBpbXByb3ZlbWVudCBpcyBhZGRpbmcgYSBwb2QgY2Fwc3VsZSBmb3IgZGV0ZXJnZW50LiBZb3Ugb25seSBuZWVkIHRvIHJlZmlsbCB0aGUgUmluc2UgQWlkIG9uZSB0aW1lLCBhbmQgaXQgd2lsbCBsYXN0IGZvciBhIGNvdXBsZSBvZiB3YXNoIGN5Y2xlcy4gQnV0IHlvdSBoYXZlIHRvIHB1dCBuZXcgZGV0ZXJnZW50IGV2ZXJ5IHNpbmdsZSB3YXNoLiBCeSBhZGRpbmcgZXh0cmEgc3BhY2UgZm9yIGRldGVyZ2VudCwgeW91IG9ubHkgbmVlZCB0byByZWZpbGwgaXQgb25jZSBhIHdlZWsuPC9wPgo8cD5Bbm90aGVyIHBvdGVudGlhbCBmZWF0dXJlIGNvdWxkIGJlIGFkZGluZyBzb21lIFNtYXJ0IGZlYXR1cmVzIGxpa2UgYXV0byBzdGFydCBhZnRlciBpdHMgZnVsbC48L3A+CjxoNCBpZD0iZmV3LXBhaW4tcG9pbnRzLW9mLXRoZS1jdXJyZW50LXByb2R1Y3QiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjZmV3LXBhaW4tcG9pbnRzLW9mLXRoZS1jdXJyZW50LXByb2R1Y3QiPiM8L2E+IDxzdHJvbmc+RmV3IFBhaW4gUG9pbnRzIG9mIHRoZSBjdXJyZW50IHByb2R1Y3Q8L3N0cm9uZz48L2g0Pgo8dWw+CjxsaT5Mb2FkIGFuZCB1bmxvYWQgcHJvY2VzczwvbGk+CjxsaT5Gb3IgdGhlIG92ZXIgdHJheTogQmVuZCBvdmVyLCBzdGFuZCB1cCwgYmVuZCBvdmVyLCBzdGFuZCB1cCBmb3IgdGhlIGRpc2hlczwvbGk+CjxsaT5EZXRlcmdlbnQgaGFzIHRvIGJlIGxvYWRlZCBldmVyeSBzaW5nbGUgdGltZTwvbGk+CjwvdWw+CjxoNCBpZD0iZmluYWwtdGhvdWdodCI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNmaW5hbC10aG91Z2h0Ij4jPC9hPiA8c3Ryb25nPkZpbmFsIFRob3VnaHQ8L3N0cm9uZz48L2g0Pgo8cD5Tb21ldGltZXMgcGVvcGxlIGdvIHRvIGEgcGFydHksIGFuZCB0aGUgaG9zdCBwcm92aWRlZCBwbGFzdGljIHRhYmxld2FyZSBmb3IgZXZlcnkgZ3Vlc3QuIFBhcnQgb2YgdGhlIHJlYXNvbiBjb3VsZCBiZSB0aGV5IGRvbid0IGhhdmUgZW5vdWdoIHRhYmxld2FyZSBmb3IgZXZlcnlvbmUuIEFub3RoZXIgcmVhc29uIG1pZ2h0IGJlIHRoZXkgd2FudCB0byBzYXZlIHRoZSB0aW1lIHRvIHdhc2ggYW5kIGNsZWFuIHRoZSBzbyBtYW55IGRpc2hlcy4gRGlzaHdhc2hlciBhbHJlYWR5IHNhdmVkIHVzIGEgbG90IG9mIHRpbWUsIHNvIHdlIGNvdWxkIGVuam95IHRoZSBleHRyYSB0aW1lIHdoaWxlIGNvb2tpbmcsIGVhdGluZywgYW5kIHRhbGtpbmcgd2l0aCBmYW1pbHkuIFdoeSBub3QgbWFrZSBpdCBzYXZlIHVzIG1vcmUgdGltZT8gQWxzbyBsZXNzIHBsYXN0aWMuPC9wPgo8L0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yPgo="},null]}