{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week5.md?vue&type=template&id=65daa694&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week5.md","mtime":1602526768969},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1600070946946},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":1600070946945},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":1600070943655}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ3ZWVrLTUtbmV3LW1ldGFwaG9ycyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2Vlay01LW5ldy1tZXRhcGhvcnMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBXZWVrIDUgTmV3IE1ldGFwaG9ycyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZpbmFsLXJlc3VsdCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZmluYWwtcmVzdWx0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBGaW5hbCBSZXN1bHQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvRmluYWwlMjBSZXN1bHQuanBnIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRldGFpbCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZGV0YWlsIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgRGV0YWlsIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIHRoaXMgcHJvamVjdCwgSSBkZWNpZGVkIHRoYXQgSSBhbSBnb2luZyB0byB1c2UgdGhlIGN1cnJlbnQgQnJhaW5zdG9ybSBjYXJkcyB0byBnZW5lcmF0ZSBhIG5vdmVsIHNwaW4uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSSBjaG9zZSBEYW4gTG9ja3RvbidzIE5ldyBNZXRhcGhvcnMgVG9vbGtpdCBhcyBteSBkZWNrLiBJIGFtIGdvaW5nIHRvIHJhbmRvbWx5IGRyYXcgMiB0byAzIGNhcmRzIGZyb20gSW1hZ2UgY2FyZHMsIHRoZW4gMSB0byAyIGNhcmRzIGZyb20gY29uY2VwdCBjYXJkcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQWZ0ZXIgdGhlIHJhbmRvbSBkcmF3aW5nIHByb2Nlc3MsIEkgaGF2ZSB0aG9zZSBpbWFnZSBjYXJkczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlR3byBjYXJkcyBmcm9tIENvbmNlcHRzIGNhcmQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiVHdvIGNhcmRzIGZyb20gSW1hZ2UgQ2FyZHMiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvMjAyMDEwMTEyMzUxNTMucG5nIiwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvaW1hZ2UtMjAyMDEwMTEyMzUyMjQ5NTkucG5nIiwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lyd2luY2h5aS9pbWdiZWQvbWFzdGVyL2ltZy8yMDIwMTAxMTIzNDk0MS5wbmciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lyd2luY2h5aS9pbWdiZWQvbWFzdGVyL2ltZy8yMDIwMTAxMTIzNTA1NS5wbmciLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGlmZmVyZW50LWNvbG9yZWQtd2luZG93cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZGlmZmVyZW50LWNvbG9yZWQtd2luZG93cyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERpZmZlcmVudCBjb2xvcmVkIFdpbmRvd3MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgY29uY2VwdCBjYXJkcyBJIGRyYXcgYXJlIHZlcnkgZ2VuZXJhbC4gU28gSSBzdGFydCB0byB0aGluayBhYm91dCBteSBwcm9ibGVtIHdpdGggYSBzaWducG9zdCBhbmQgZGlmZmVyZW50IGNvbG9yZWQgd2luZG93cy4gRm9yIHRoZSBkaWZmZXJlbnQgY29sb3JlZCB3aW5kb3dzLCB0aGUgZmlyc3QgdGhpbmcgSSB0aGluayBhYm91dCBpcyB0aGUgc2t5c2NyYXBlcnMgaGF2ZSB0aGUgb25lLXdheSB0cmFuc3BhcmVudCBnbGFzcy4gWW91IGNhbid0IHNlZSBpbnNpZGUgdGhlIGJ1aWxkaW5ncyBmcm9tIHRoZSBvdXRzaWRlLiBPciwgdGhlIG1pcnJvciBpcyBhIGJpZyBzY3JlZW4uIFRoZXJlIGFyZSBzb21lIHByb2R1Y3RzIGluIHRoZSBtYXJrZXQgdXNpbmcgYSBtaXJyb3IgYXMgYSBzY3JlZW4uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk9uZSBwcm9kdWN0IEkgdGhpbmsgaXMgY29vbCBjYWxsZWQgTWlycm9yIGJ5IEx1bHVsZW1vbi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHdpZHRoOiAiNTYwIiwKICAgICAgICAgIGhlaWdodDogIjMxNSIsCiAgICAgICAgICBzcmM6ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC95b3ZNUVBUM2cydyIsCiAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgYWxsb3c6CiAgICAgICAgICAgICJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIiwKICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgYmVsaWV2ZSBteSBwcm9kdWN0IHNob3VsZCB1c2UgZ2xhc3MgYXMgdGhlIGNhcnJpZXIgZm9yIHRoZSBtZXNzYWdlLiBUaGUgZ2xhc3MgaXRzZWxmIGNhbid0IGRlbGl2ZXIgYW55IG1lc3NhZ2UsIHNvIGl0IHdpbGwgYmUgYXMgYSBjb21iaW5hdGlvbiBhcyBhIHNjcmVlbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJIHJlYWxseSB3YW50IHRvIHBlcnN1YWRlIHlvdSAtIHdoaWxlIHlvdSBhcmUgcmVhZGluZyB0aGlzIGFydGljbGUgLSBldmVyeXRoaW5nIGluIG15IGltYWdpbmFyeSBwcm9kdWN0IGlzIGZlYXNpYmxlLCBhcHByb2FjaGFibGUsIGFuZCBub3QgbGltaXRlZCBieSBjdXJyZW50IHRlY2hub2xvZ3kuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSSBkaWQgYSBsb3Qgb2YgcmVzZWFyY2ggYWJvdXQgdGhlIHRyYW5zcGFyZW50IHNjcmVlbi4gWGlhb21pLCBhIENoaW5lc2UgdGVjaG5vbG9neSBjb21wYW55LCByZWxlYXNlZCBpdHMgZmlyc3QgZnVsbHkgdHJhbnNwYXJlbnQgVFYuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaWZyYW1lIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICB3aWR0aDogIjU2MCIsCiAgICAgICAgICBoZWlnaHQ6ICIzMTUiLAogICAgICAgICAgc3JjOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvWEJJN2JET0VOQk0iLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93OgogICAgICAgICAgICAiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIsCiAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46ICIiCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiU3VtbWFyaXplLCBteSBmaXJzdCBpZGVhIGlzICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJhIHRyYW5zcGFyZW50IGdsYXNzIHNjcmVlbi4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImEtc2lnbnBvc3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Etc2lnbnBvc3QiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEEgU2lnbnBvc3QiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTaWducG9zdCBpcyBldmVyeXdoZXJlIGZyb20gdGhlIG1ldHJvIHN0YXRpb24gdG8gc3VwZXIgbWFsbCdzIGludGVyc2VjdGlvbi4gSW4gTmVicmFza2EsIGEgc2lnbnBvc3QgaXMgbm90IHZlcnkgY29tbW9uIGJlY2F1c2UgbW9zdCBvZiB0aGUgdGltZSwgeW91IG5lZWQgbmF2aWdhdGlvbnM7IHlvdSBhcmUgZHJpdmluZy4gSSBncmV3IHVwIGluIGEgYmlnIGNpdHkgaW4gQ2hpbmEgY2FsbGVkIFhpJ2FuLCB3aXRoIGEgcG9wdWxhdGlvbiBvZiAxMiBtaWxsaW9uLiBXZSBoYXZlIGZpdmUgbWV0cm8gbGluZXMgY3VycmVudGx5IHVzaW5nLCBhbmQgdGhleSBhcmUgc3RpbGwgYnVpbGRpbmcgbW9yZS4gWGknYW4gaGFzIGEgbG9uZyBoaXN0b3J5IGJlY2F1c2UgaXQgaXMgdGhlIGNhcGl0YWwgb2YgMTMgZHluYXN0aWVzIGluIGFuY2llbnQgQ2hpbmVzZSBoaXN0b3J5LiBUaGUgc3RyZWV0IGFuZCBjaXR5IHVyYmFuIHBsYW5uaW5nIGluaGVyaXRlZCBmcm9tIHRoZSBEYW5nIGR5bmFzdHkgb2YgY2hlc3Nib2FyZC1saWtlIHJvYWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicXVpY2stYmFja2dyb3VuZC1hYm91dC14aS1hbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcXVpY2stYmFja2dyb3VuZC1hYm91dC14aS1hbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFF1aWNrIGJhY2tncm91bmQgYWJvdXQgWGknYW4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHA6Ly81YjA5ODhlNTk1MjI1LmNkbi5zb2h1Y3MuY29tL2ltYWdlcy8yMDIwMDMzMC85M2QwNTZkOGMwN2M0Nzg5OTFlMmRkNTVlYzU3YWE0YS5qcGVnIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIkltYWdlIG9mIGNpdHkgb2YgQ2hhbmcnYW4sIERhbmcgZHluYXN0eS4gRnJvbSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RhbmdfZHluYXN0eSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlNvaHUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy9jL2M1L0NoYW5nJTI3YW5fb2ZfVGFuZy5qcGciLAogICAgICAgICAgICBhbHQ6ICJpbWciCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigiTWFwIG9mIENoYW5nJ2FuIENpdHkgaW4gVGFuZyBEeW5hc3R5LCByZXRyaWV2ZWQgZnJvbSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1hpJTI3YW4jL21lZGlhL0ZpbGU6Q2hhbmcnYW5fb2ZfVGFuZy5qcGciLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJXaWtpcGVkaWEiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIHRoZSBjZW50ZXIgb2YgWGknYW4sICB0aGVyZSBpcyBhIGJ1aWxkaW5nIG5hbWVkIEJlbGwgVG93ZXIuIEFyb3VuZCBpdCwgaXQncyB0aGUgY2VudGVyIG9mIFhpJ2FuLiBZb3UgY2FuIGNhbGwgaXQgZG93bnRvd24uIFRoZXJlIGlzIGFuIHVuZGVycGFzcyBuYW1lZCBCZWxsIFRvd2VyIHVuZGVycGFzcy4gIFhpJ2FuIGhhcyBmb3VyIG1lYW4gc3RyZWV0cyBuYW1lZCBOb3J0aCwgU291dGgsIEVhc3QsIFdlc3QgTWFpbnN0cmVldC4gQmVsbCBUb3dlciB1bmRlcnBhc3MgaGFzIHRlbiBleGl0cy5cbldoaWxlIEkgc2VlIHRoZSBrZXl3b3JkIG9mIFwic2lnbnBvc3QsXCIgdGhlIGZpcnN0IHRoaW5nIHRoYXQgY2FtZSB1cCB0byBteSBtaW5kIGlzIHRoZSBzaWducG9zdCBpbiBCZWxsIFRvd2VyIHVuZGVycGFzcy4gVGhlIHVuZGVycGFzcyBpdHNlbGYgaXMgdmVyeSBjb25mdXNpbmcsIGFuZCB0aGUgc2lnbnBvc3QgbWFrZXMgaXQgd29yc2UuIEkgc3BlbmQgMjAgeWVhcnMgZ3Jvd2luZyB1cCBpbiB0aGF0IGNpdHkgYXMgYSBuYXRpdmUsIGFuZCBJIGdvdCBsb3N0IGFsbCB0aGUgdGltZS4gSGVyZSdzIGFuIGltYWdlIG9mIEJlbGwgVG93ZXIgc2lnbnBvc3QuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaXJ3aW5jaHlpL2ltZ2JlZC9tYXN0ZXIvaW1nL2NhNzFhMWNmNTI4MTU3ZWE5N2E1NTBkNmE5M2QwN2VhLmpwZ19yXzcyMHg0ODB4OTVfMDAyMzQxOGYuanBnIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIlNpZ25wb3N0IGNhcHR1cmVkIGF0IEJlbGwgVG93ZXIgdW5kZXJwYXNzLCBSZXRyaWV2ZWQgZnJvbSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly90cmF2ZWwucXVuYXIuY29tL3AtcGw1OTcwMTk5IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiaHR0cDovL3RyYXZlbC5xdW5hci5jb20vcC1wbDU5NzAxOTkiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBbmQgdGhleSBuYW1lZCBleGl0IGxpa2UiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk5vcnRoIE1haW5zdHJlZXQgV2VzdCBFeGl0IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJFYXN0IE1haW5zdHJlZXQgTm9ydGggRXhpdCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRWFzdCBNYWluc3RyZWV0IFNvdXRoIEV4aXQiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIGRlZmluaXRlbHkgdmVyeSBjb25mdXNpbmcgZm9yIHRvdXJpc3RzLCBhbmQgYW55b25lIGFycml2ZWQgaW4gWGknYW4gZm9yIHRoZSBmaXJzdCB0aW1lLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgd2lzaCB0byByZWRlc2lnbiB0aGUgWGknYW4gdW5kZXJwYXNzIHNpZ25wb3N0IHVzaW5nIGEgdHJhbnNwYXJlbnQgZ2xhc3Mgc2NyZWVuLiBTaW5jZSB5b3UgaGF2ZSBjZWxsaW5nIHdhbGtpbmcgdW5kZXJncm91bmQsIHRoZSBzY3JlZW4gY291bGQgaGFuZyBpbiBhbGwgZm91ciBkaXJlY3Rpb25zLCBvciBhbiBhbm51bHVzIHNoYXBlIHNjcmVlbiBhbmQgeW91IGNhbiBzZWUgdGhpbmdzIGluIGFsbCBkaXJlY3Rpb25zLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJIZXJlIGlzIGEgcXVpY2sgc2tldGNoIG9mIG15IGlkZWE6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvVW50aXRsZWRfQXJ0d29yayUyMDEwLmpwZyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTaW5jZSBJIGNvdWxkIG5vdCBwaHlzaWNhbGx5IGJhY2sgdG8gQ2hpbmEgYW5kIHRha2UgcGhvdG9zIGZvciBtb2NrdXBzLiBJIGZvdW5kIHRoaXMgcGhvdG8gb25saW5lLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgZGFuZ2VyIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIkNvcHlyaWdodCBEaXNjbGFpbWVyIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSBwaWN0dXJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0IHdhcyBmb3VuZCBvbmxpbmUuIE5vIGNvcHlyaWdodCBvZiB0aGF0IGltYWdlLiBQZXJzb25hbCBTdHVkZW50IHByYWN0aWNlIHByb2plY3QgdXNlIG9ubHkuIE5vbi1jb21tZXJjaWFsIHVzZSBvbmx5LiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvZDQxZWMwMDg2MzczNDZhN2FkNWEzMzdlMmYxZjZkNTQuanBnLW1vYmlsZS5qcGVnIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIlhpJ2FuIEJlbGwgVG93ZXIgdW5kZXJwYXNzLCBSZWNlaXZlZCBmcm9tICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cubWVpcGlhbi5jbi8xbjNta253ZiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImh0dHBzOi8vd3d3Lm1laXBpYW4uY24vMW4zbWtud2YiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgdXNlZCBDaW5lbWEgNEQgY2FtZXJhIHRyYWNraW5nIHRvIHRyYWNrIHRoZSBYLFksIGFuZCBaLWF4aXMuIFRoZW4gY3JlYXRlZCB0aGUgc2hhcGUgb2YgdGhlIHNjcmVlbiBvbiB0aGUgdG9wLiBJIHJlbmRlcmVkIGFuIGVtcHR5IHNoYXBlIG9mIHRoZSBzY3JlZW4gYW5kIGFkZGVkIHNpZ25wb3N0IGluIFBob3Rvc2hvcC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvc2NyZWVuc2hvdGMuSlBHIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lyd2luY2h5aS9pbWdiZWQvbWFzdGVyL2ltZy9QU1NjcmVlbnNob290LkpQRyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIHByb2R1Y3QgLSB3aGVuIHRoZSBwYXNzZW5nZXIgaXMgc3RhbmRpbmcgaW4gdGhlIGNlbnRlciwgYW5kIHVuZGVyIHRoZSBnbGFzcyAtIHRoZXkgY291bGQgY2hlY2sgdGhlIHBsYWNlIHRoZXkgbmVlZCB0byBnbyB2ZXJ5IGVhc2lseS4gSSByZW1lbWJlcmVkIGV2ZXJ5IHRpbWUgSSB3ZW50IHRvIHRoZSBCZWxsIFRvd2VyIHVuZGVycGFzcyBiZWNhdXNlIGl0IGlzIHVuZGVyZ3JvdW5kLCB0aGVyZSBpcyBubyBHUFMgc2lnbmFsLiBJIGJlbGlldmUgdGhpcyBwcm9kdWN0IGNvdWxkIGJyaW5nIHBlb3BsZSBjYWxtbmVzcyBpbiB0ZWNobm9sb2d5LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZ1dHVyZSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZnV0dXJlIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgRnV0dXJlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWxsIHRoZSBzY2ktZmkgbW92aWVzIGluIHJlY2VudCB5ZWFycyBpbWFnaW5lZCBhIHdvcmxkIGZpbGxlZCB3aXRoIGZyb250LXByb2plY3RlZCBob2xvZ3JhcGhpYyBkaXNwbGF5IHRlY2hub2xvZ3kuIEJ1dCBob25lc3RseSwgdGhlIHRlY2hub2xvZ3kgaXNuJ3QgdGhlcmUgeWV0LiBUaGUgdHJhbnNwYXJlbnQgZ2xhc3MgYW5kIHNjcmVlbiBpcyBhIG1vcmUgYXBwcm9hY2hhYmxlIHdheS4gSXQgY291bGQgYWxzbyBiZSB1c2VkIGFzIGEgYnVzIHN0b3AgYm9hcmQsIGNvbW1lcmNpYWwgYmlsbGJvYXJkLiBNYXliZSB0aGUgbmV4dCB0aW1lIHlvdSB2aXNpdCBhIGJvdXRpcXVlIGZhc2hpb24gc3RvcmUgb24gdGhlIHN0cmVldCwgdGhlaXIgc2hvcHdpbmRvdyBpcyBub3Qgb25seSBnbGFzcyBidXQgYWxzbyBhIHNjcmVlbi4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}