{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/nyu/vr/Week3.md?vue&type=template&id=32833fd6&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/nyu/vr/Week3.md","mtime":1601352904860},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1600070946946},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":1600070946945},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":1600070943655}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ3ZWVrLTMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3dlZWstMyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFdlZWsgMyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRpc2N1c3Npb24tcG9zdCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZGlzY3Vzc2lvbi1wb3N0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEaXNjdXNzaW9uIFBvc3QiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJIHN0aWxsIGhhdmVuJ3QgcmVjZWl2ZWQgbXkgT2N1bHVzIEhlYWRzZXQsIGJ1dCBJIGRvIGhhdmUgYWNjZXNzIHRvIFBTNCBWUiwgYW5kIEkgaGFkIE9jdWx1cyBIZWFkc2V0IGV4cGVyaWVuY2UuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnSSBoYXZlIHRoZSBtb3Rpb24gc2lja25lc3MgaXNzdWUuIER1cmluZyB0aGUgZGV2ZWxvcG1lbnQsIG9uZSBvZiB0aGUgdGhpbmdzIHRoYXQgY291bGQgZnJlYWsgbWUgb3V0IGlzIHRoZSBtb2RlbCBpcyB3cm9uZy4gSXRcJ3MgInN0cmFuZ2VyIHRoaW5ncyIgaW4gcmVhbCBpZiBJIHBva2UgbXkgaGVhZCBvZiB0aGUgbW9kZWwgYW5kIHNlZSB0aGUgb3RoZXIgc2lkZSBvZiB0aGUgbW9kZWwgdGV4dHVyZS4gVGhlcmUgaXMgb25lIGluY2lkZW50LCB0aGUgc2V0dGluZ3Mgb2YgRk9WIGlzIHdyb25nLCBvciBzb21lIHdlaXJkIGJ1ZyBoYXBwZW5lZDsgSSB3YXMgYmVpbmcgdGVsZXBvcnRlZCB0byBzb21ld2hlcmUgbm93aGVyZSBpbiB2ZXJ5IGhpZ2ggdXAuIEkgY2FuIHNlZSB0aGUgdm9pZCwgYW5kIHRoZSBsYW5kIEkgY3JlYXRlZCBpcyBzbyBzbWFsbC4nCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbm90aGVyIGlzc3VlIHRoYXQgY291bGQgdHJpZ2dlciBteSBtb3Rpb24gc2lja25lc3MgKHByb2JhYmx5IHRoZSBtYWluIHJlYXNvbikgaXMgdGhlIGxvdyByZWZyZXNoIHJhdGUuIE1vc3QgaGVhZHNldCBub3cgaGFzIGEgOTBIeiByZWZyZXNoIHJhdGUuIFdoZW4gSSBmaXJzdCBpbXBvcnQgbXkgZXhwZXJpZW5jZSBwcm9qZWN0LCB3aGljaCBvcHRpbWl6ZWQgZm9yIE9jdWx1cyBSaWZ0IGJ1dCBub3QgUXVlc3QuIFRoZSBjb21wdXRpbmcgcG93ZXIgb2YgUXVlc3QgaXMgbm90IGVub3VnaCB0byBoYW5kbGUgdGhlIHBvbHlnb24gY29tcHV0ZXIgdGhhdCBjYW4gaGFuZGxlIGl0LiBUaGUgcmVmcmVzaCByYXRlIGhhcyBkcm9wcGVkIHRvIDIwSHogYW5kIGV2ZW4gbG93ZXIuIEl0IG1hZGUgbWUgdmVyeSBzaWNrLlxuT2N1bHVzIGhhcyB0aGF0IGd1aWRlIGJvdW5kYXJ5IHN5c3RlbSB3aGVuZXZlciB5b3UgYXJlIHRvbyBjbG9zZSB0byB0aGUgYm91bmRhcnkgc3lzdGVtLCBpdCB3aWxsIHdhcm4geW91LiBNYXliZSBiZWNhdXNlIFZSIGlzIG5vdCBuZXcgZm9yIG1lLCBJIGJhcmVseSBmZWVsIHRoYXQgSSBmb3Jnb3QgYWJvdXQgdGhlIHBoeXNpY2FsLiBNYXliZSBiZWNhdXNlIEkga2VlcCB0ZWxsaW5nIG15c2VsZiB0aGF0IEkgYW0gaW4gYSB2aXJ0dWFsIHNwYWNlLCBldmVyeXRoaW5nIGlzIG5vdCByZWFsbHkgbW92aW5nIHRvIGhhbmRsZSBtb3Rpb24gc2lja25lc3MgYmV0dGVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uIHRoZSBvdGhlciBoYW5kLCBWUiBkb2VzIGxldCBtZSBmb3Jnb3QgYWJvdXQgcGh5c2ljYWwgcmVhbGl0eS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJIGNhbid0IHBsYXkgaG9ycm9yIGdhbWVzIGluIFZSOyBJIHRyaWVkIGEgbGl0dGxlIGJpdCwgdGhlbiBJIGhhdmUgdG8gZ2l2ZSB1cCBiZWNhdXNlIGl0J3MgdG9vIGludGVuc2UuIEluIHRoZSBQQyBhbmQgY29uc29sZSBnYW1lcywgdGhlcmUgaXMgYSBib3VuZGFyeSBiZXR3ZWVuIG1lIGFuZCB0aGUgc2NyZWVuLiBJIGtub3cgd2hhdGV2ZXIgc2hvd2luZyBvbiB0aGUgc2NyZWVuIGlzIG5vdCB0cnVlLCB3aGlsZSB0aGUgVlIgYnJlYWtzIHRoaXMga2luZCBvZiBiYWxhbmNlLiBJIHdhcyBwbGF5aW5nIEZhcnBvaW50LCBhbiBGUFMgZ2FtZS4gV2hlbiBhbiBhbGllbiBidWcganVtcGVkIG9uIG15IGZhY2UsIEkgaGF2ZSB0byB0YWtlIGEgYnJlYWsgYW5kIHRha2Ugb2ZmIHRoZSBWUiBoZWFkc2V0IGZvciBhIHdoaWxlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIHRoZSBvdGhlciBjbGFzcywgd2UgaGF2ZSByZWFkIGFuIGFydGljbGUgYWJvdXQgaGFuZCBnZXN0dXJlcyBhbmQgZmVlZGJhY2suIFRoZSBhdXRob3Igd3JvdGUgdGhlIGFydGljbGUgaW4gMjAxMSwgdGhlIHllYXIgYmVmb3JlIFZSIHN0YXJ0cyB0byBibG9vbS4gSGUgc2FpZDoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRGlyZWN0bHkgbWFuaXB1bGF0aW5nIGEgdmlydHVhbCAzRCByZXByZXNlbnRhdGlvbiAoSXJvbiBNYW4sIGlmIEkgcmVtZW1iZXIgcmlnaHQ/KSB3b3VsZCBoYXZlIHRoZSBwcm9ibGVtIG9mIG5vdCBiZWluZyBhYmxlIHRvIGZlZWwgd2hhdCB5b3UncmUgbWFuaXB1bGF0aW5nLCB3aGljaCBJIHN1c3BlY3Qgd291bGQgcmVhbGx5IHRocm93IG9mZiB5b3VyIHByb3ByaW9jZXB0aXZlIHNlbnNlcy4gTXkgKGJyaWVmKSBleHBlcmllbmNlcyB0cnlpbmcgdG8gbWFuaXB1bGF0ZSBvYmplY3RzIGJ5IFdhdmluZyBNeSBIYW5kcyBJbiBUaGUgQWlyIGhhdmUgbm90IGJlZW4gcG9zaXRpdmUsIGJlY2F1c2UgbXkgaGFuZHMgd2VyZSByYXJlbHkgd2hlcmUgSSB0aG91Z2h0IHRoZXkgd2VyZS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIkZyb20gQnJldCBWaWN0b3IsICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cDovL3dvcnJ5ZHJlYW0uY29tL0FCcmllZlJhbnRPblRoZUZ1dHVyZU9mSW50ZXJhY3Rpb25EZXNpZ24vcmVzcG9uc2VzLmh0bWwiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlJlc3BvbnNlczogQSBCcmllZiBSYW50IG9uIHRoZSBGdXR1cmUgb2YgSW50ZXJhY3Rpb24gRGVzaWduIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgYmlnZ2VzdCBsaW1pdGF0aW9uIG9mIHRoZSBWUiBleHBlcmllbmNlIGlzIHRoZSBsYWNrIG9mIGZlZWRiYWNrLiBDdXJyZW50bHksIGV2ZXJ5dGhpbmcgaXMgaGFwdGljIGZlZWRiYWNrLiBJdCdzIGxpbWl0ZWQsIG92ZXItc2ltcGxpZmllZCwgbGltaXRlZCBiZWNhdXNlIG9mIGN1cnJlbnQgdGVjaG5vbG9neS4gUmVhZHkgUGxheWVyIE9uZSBhbmQgc28gbWFueSBvdGhlciBTY2ktZmkgbW92aWVzIGhhdmUgc2hvd24gdXMgdGhlIHBvc3NpYmlsaXR5IGluIHRoZSBmdXR1cmUuIE1heWJlIGl0IHdpbGwgYmUgcmVhZHkgaW4gdGhlIG5leHQgY29ybmVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBbHdheXMgYXBwcmVjaWF0ZSB5b3UgcmVhZCBteSByYW1ibGluZyBzdHVmZiBoZXJlLiIpXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}