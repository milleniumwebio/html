{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week1.md?vue&type=template&id=65d8d518&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week1.md","mtime":1600135912139},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1600070946946},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":1600070946945},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":1600070943655}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ3ZWVrLTEtZmFudGFzeS1kZXZpY2UiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3dlZWstMS1mYW50YXN5LWRldmljZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdlZWsgMSBGYW50YXN5IERldmljZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgdGlwIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIkRldmlhdGVkIGZyb20gR3JvdXAgSWRlYSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJPdXIgZ3JvdXAgd2FzIHNob3J0IG9uIHRpbWUgZHVyaW5nIHRoZSBkaXNjdXNzaW9uIHRpbWUgZHVlIHRvIFpvb20gY29ubmVjdGlvbiBpc3N1ZS4gQ291cGxlIG9mIGRheXMgYWdvLCB3aGVuIEkgZG8gbXkgZGlzaGVzLCBJIGNhbWUgdXAgd2l0aCB0aGlzIGlkZWEuIEkgaG9wZSBpdCdzIG9rYXkgdG8gZGV2aWF0ZSBmcm9tIG91ciBncm91cCBpZGVhLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhdXRvLWxvYWQtdW5sb2FkLWRpc2h3YXNoZXIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2F1dG8tbG9hZC11bmxvYWQtZGlzaHdhc2hlciIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEF1dG8gTG9hZCAtIFVubG9hZCBEaXNod2FzaGVyIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2tldGNoIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNza2V0Y2giIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBTa2V0Y2giKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvRmFudGFzeURldmljZS5qcGVnIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1haW4tZnVuY3Rpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNtYWluLWZ1bmN0aW9ucyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTWFpbiBGdW5jdGlvbnMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJPbiB0aGUgdXBwZXIgc2lkZSBvZiB0aGUgZGlzaHdhc2hlciBkb29yLCB5b3UgY2FuIGZlZWQgdGhlIHBsYXRlIGluIGxpa2UgeW91IGZlZWQgQ0QgdG8gdGhlIENEIHBsYXllciIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJXaGVuZXZlciB5b3UgbmVlZCBhIHBsYXRlLCBzaW1wbHkgcHJlc3MgdGhlIERFTE9BRCBESVNIIGJ1dHRvbiwgYW5kIGl0IHdpbGwgZmVlZCB5b3UgYSBuZXcgb25lIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSBkZXRlcmdlbnQgd2lsbCBub3cgcHV0IGl0IGZyb20gdGhlIHVwcGVyIHNpZGUgb2YgdGhlIG1hY2hpbmUsIHNvIHlvdSBkb24ndCBoYXZlIHRvIGJlbnQgb3ZlciB0byByZWFjaCBpdCIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbnNpZGUsIHRoZSB1cHBlciBsZXZlbCBoYXMgaG9va3MvY2xhd3MgdG8gYXV0b21hdGljYWxseSBsb2FkIGFuZCBkZWxvYWQgdGhlIHBsYXRlIGZvciB5b3UiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUaGUgbG92ZXIgbGV2ZWwsIHlvdSBjYW4gc3RpbGwgdXNlIGFzIG5vcm1hbCBkaXNoIHdhc2hlciIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3RvcnktYmVoaW5kLWl0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzdG9yeS1iZWhpbmQtaXQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN0b3J5IEJlaGluZCBpdCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBkaXNod2FzaGVyIGlzIG5vdCBjb21tb24gaW4gYSBDaGluZXNlIGZhbWlseS4gR3Jvd2luZyB1cCwgd2FzaGluZyBkaXNoZXMgaXMgYWx3YXlzIHBhcnQgb2YgbWUgYW5kIG15IG1vbSdzIGpvYiBiZWNhdXNlIG15IGRhZCBpcyB0aGUgY2hpZWYuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hlbiBJIGZpcnN0IGFycml2ZWQgaW4gdGhlIFUuUy4gYW5kIGdvdCBteSBvd24gYXBhcnRtZW50LiBJIG5ldmVyIHVzZSBteSBkaXNod2FzaGVyIGZvciBhIHZlcnkgbG9uZyB0aW1lIGJlY2F1c2UgSSBkb24ndCBrbm93IGhvdyB0byB1c2UgaXQuIChJIGRvbid0IGV2ZW4ga25vdyB3aGF0IGRldGVyZ2VudCBpcykgSSB1c2UgdGhlIGRpc2h3YXNoZXIgYXMgYW4gZXh0cmEgcGxhY2UgdG8gZHJhaW4gYW5kIGRyeSBvdXQgbXkgZ2xhc3N3YXJlLiBJIHZpc2l0ZWQgbXkgZnJpZW5kcycgaG91c2UsIGFuZCBoZSB0YXVnaHQgbWUgaG93IHRvIGxvYWQgdGhlIHBsYXRlIHByb3Blcmx5LiBIZSBldmVuIGdhdmUgbWUgYSBmZXcgZGV0ZXJnZW50IGJsb2NrcyB0byBsZXQgbWUgdHJ5IGl0IG91dC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZmlyc3QgdGltZSB3aGVuIG15IGRpc2hlcyBpcyByZWFkeSBhbmQgY2xlYW4sIEkgV293ZWQgbGlrZSBDYXZlIE1hbiBtZXQgdGhlIG5ldyBpUGhvbmUuIEkgYnJhZ2dlZCBpdCB3aXRoIG15IG1vbSBhbmQgc2hvd2VkIGhlciBob3cgZWZmb3J0bGVzc2x5IHRvIHdhc2ggdGhlIGRpc2hlcy4gQW5kIHRoZXJlIGFyZSBhIGZldyBwcm9ibGVtcyBJIGhhdGUgYWJvdXQgdXNpbmcgdGhlIGRpc2h3YXNoZXI6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiV2hlbiBJIGhhdmUgbG93ZXIgYmFjayBwYWluLCB0aGUgbGFzdCB0aGluZyBJIHdhbnQgdG8gZG8gaXMgYmVuZCBvdmVyIGFuZCBwdXQgZGV0ZXJnZW50IHRoZXJlOyB3aHkgaXQgY2FuJ3QgbG9hZCBmaXZlIGRldGVyZ2VudHMgYXQgdGhlIHNhbWUgdGltZT8iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSSBoYXRlIGxvYWQgZGlzaGVzLCBhbmQgc29tZXRpbWVzIEkgbG9hZCBpdCB3cm9uZywgc28gdGhlcmUgYWx3YXlzIHNvbWUgZGlzaGVzIHRoYXQgYXJlIG5vdCBjbGVhbmVkIHByb3Blcmx5LiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJIGhhdGUgdG8gdW5sb2FkIHRoZSBkaXNoZXMuIERpc2h3YXNoZXIgc3BvaWxlZCBtZSBub3QgdG8gd2FzaCBkaXNoZXMsIHdoeSBub3Qgc3BvaWwgbWUgYSBsaXR0bGUgYml0IG1vcmU/IENvdWxkIEkgbG9hZCBhbmQgdW5sb2FkIHRoZSBkaXNoIGZvciBtZT8iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSGVuY2UsIEkgY3JlYXRlIGFuZCBza2V0Y2hlZCB0aGlzIGlkZWEgb2YgYXV0b2xvYWQvIHVubG9hZCBkaXNod2FzaGVyLiBUaGUgaW5zcGlyYXRpb24gaXMgY29taW5nIGZyb20gdGhlIENEUk9NIG9uIGNhcnMgb3IgZ2FtaW5nIGNvbnNvbGUuIFlvdSBwdXNoIHRoZSBkaXNrIGluLCBhbmQgdGhlIG1hY2hpbmUgd2lsbCB0YWtlIGl0IGluc2lkZS4gQWxzbywgdGhlcmUgd2lsbCBiZSAgYSBidXR0b24gdGhlcmUuIFdoZW4gdGhlIGRpc2h3YXNoZXIgZmluaXNoZWQgaXRzIHdhc2hpbmcgY3ljbGUsIHRoZSBMRUQgaW5kaWNhdGVzIHRoZSBkaXNoIGlzIGNsZWFuLCBhbmQgaXQgd2lsbCBsZXQgeW91IGtub3cgaG93IG1hbnkgZGlzaGVzIGFyZSBsZWZ0IGluc2lkZSBpdC4gUHJlc3NpbmcgdGhhdCBidXR0b24gd2lsbCB1bmxvYWQgdGhlIHBsYXRlIGZvciB5b3UuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQW5vdGhlciBpbXByb3ZlbWVudCBpcyBhZGRpbmcgYSBwb2QgY2Fwc3VsZSBmb3IgZGV0ZXJnZW50LiBZb3Ugb25seSBuZWVkIHRvIHJlZmlsbCB0aGUgUmluc2UgQWlkIG9uZSB0aW1lLCBhbmQgaXQgd2lsbCBsYXN0IGZvciBhIGNvdXBsZSBvZiB3YXNoIGN5Y2xlcy4gQnV0IHlvdSBoYXZlIHRvIHB1dCBuZXcgZGV0ZXJnZW50IGV2ZXJ5IHNpbmdsZSB3YXNoLiBCeSBhZGRpbmcgZXh0cmEgc3BhY2UgZm9yIGRldGVyZ2VudCwgeW91IG9ubHkgbmVlZCB0byByZWZpbGwgaXQgb25jZSBhIHdlZWsuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQW5vdGhlciBwb3RlbnRpYWwgZmVhdHVyZSBjb3VsZCBiZSBhZGRpbmcgc29tZSBTbWFydCBmZWF0dXJlcyBsaWtlIGF1dG8gc3RhcnQgYWZ0ZXIgaXRzIGZ1bGwuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiZmV3LXBhaW4tcG9pbnRzLW9mLXRoZS1jdXJyZW50LXByb2R1Y3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Zldy1wYWluLXBvaW50cy1vZi10aGUtY3VycmVudC1wcm9kdWN0IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkZldyBQYWluIFBvaW50cyBvZiB0aGUgY3VycmVudCBwcm9kdWN0IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJMb2FkIGFuZCB1bmxvYWQgcHJvY2VzcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRm9yIHRoZSBvdmVyIHRyYXk6IEJlbmQgb3Zlciwgc3RhbmQgdXAsIGJlbmQgb3Zlciwgc3RhbmQgdXAgZm9yIHRoZSBkaXNoZXMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRGV0ZXJnZW50IGhhcyB0byBiZSBsb2FkZWQgZXZlcnkgc2luZ2xlIHRpbWUiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImZpbmFsLXRob3VnaHQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ZpbmFsLXRob3VnaHQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJGaW5hbCBUaG91Z2h0IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTb21ldGltZXMgcGVvcGxlIGdvIHRvIGEgcGFydHksIGFuZCB0aGUgaG9zdCBwcm92aWRlZCBwbGFzdGljIHRhYmxld2FyZSBmb3IgZXZlcnkgZ3Vlc3QuIFBhcnQgb2YgdGhlIHJlYXNvbiBjb3VsZCBiZSB0aGV5IGRvbid0IGhhdmUgZW5vdWdoIHRhYmxld2FyZSBmb3IgZXZlcnlvbmUuIEFub3RoZXIgcmVhc29uIG1pZ2h0IGJlIHRoZXkgd2FudCB0byBzYXZlIHRoZSB0aW1lIHRvIHdhc2ggYW5kIGNsZWFuIHRoZSBzbyBtYW55IGRpc2hlcy4gRGlzaHdhc2hlciBhbHJlYWR5IHNhdmVkIHVzIGEgbG90IG9mIHRpbWUsIHNvIHdlIGNvdWxkIGVuam95IHRoZSBleHRyYSB0aW1lIHdoaWxlIGNvb2tpbmcsIGVhdGluZywgYW5kIHRhbGtpbmcgd2l0aCBmYW1pbHkuIFdoeSBub3QgbWFrZSBpdCBzYXZlIHVzIG1vcmUgdGltZT8gQWxzbyBsZXNzIHBsYXN0aWMuIgogICAgICAgICkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}