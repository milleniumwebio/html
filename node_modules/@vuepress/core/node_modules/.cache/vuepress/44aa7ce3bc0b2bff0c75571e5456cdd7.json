{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/nyu/vr/Week4.md?vue&type=template&id=3283b435&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/nyu/vr/Week4.md","mtime":1602477756360},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1600070946946},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":1600070946945},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":1600070943655}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiVElQIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIldlZWsgNCBhbmQgV2VlayA1IGhhcyBiZWVuIGNvbWJpbmVkIHNpbmNlIE1pY3JvIEFzc2lnbm1lbnQgUG9zdCAwNCBtb3ZlZCB0byBXZWVrIDUiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAid2hpc2tlcnMtaW4tdGhlLWRhcmsiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3doaXNrZXJzLWluLXRoZS1kYXJrIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hpc2tlcnMgaW4gdGhlIERhcmsiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgWwogICAgICAgICAgX3ZtLl92KCJXcm90ZSBiZWZvcmUgcHJlc2VudGF0aW9uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSBmb2xsb3dpbmcgY29udGVudCB3YXMgd3JvdGUgYmVmb3JlIHRoZSBwcmVzZW50YXRpb24sIHBsZWFzZSBjaGVjayBuZXh0IHNlY3Rpb24gZm9yIHRoZSByZWZlY3Rpb24gd3JvdGUgYWZ0ZXIgdGhlIHByZXNlbnRhdGlvbi4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIG91ciBncm91cCBwcm9qZWN0OiBXaGlza2VycyBpbiB0aGUgZGFyaywgSSBzZXJ2ZWQgdGhlIHJvbGVzIGFuZCBQcm9kdWNlciwgQ3JlYXRpdmUgRGlyZWN0b3IuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSSB3b3JrZWQgZm9yIGFuIGFkdmVydGlzaW5nIGFnZW5jeSBhcyBhIGRlc2lnbmVyLiBIZXJlLCB3aGVuIEkgd2FzIGNvbW11bmljYXRpbmcgd2l0aCBteSBhY2NvdW50IG1hbmFnZXIsIEkgY2FuIHNlbnNlIHRoZSBwcmVzc3VyZSB0aGV5IHdlcmUgZXZlcnkgcHJvamVjdCBmcm9tIGJvdGggc2lkZXM6IGNsaWVudHMgYW5kIHVzLiBDbGllbnRzIHVzdWFsbHkgaGF2ZSBhIHZlcnkgaGFyc2ggZGVhZGxpbmUsIGFuZCB0aGVuIHRoZSBhY2NvdW50IG1hbmFnZXIgY29tbXVuaWNhdGVzIHdpdGggdXMgdG8gbWFrZSBzdXJlIHdlIGNhbiBnZXQgZXZlcnl0aGluZyBkb25lIGluIHRpbWUuIFRoaXMgcG9zaXRpb24gcmVxdWlyZXMgc3Ryb25nIGludGVycGVyc29uYWwgY29tbXVuaWNhdGlvbnMgYW5kIG1hbmFnZSBzdHVmZiBpbiBkZXRhaWwuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW4gdGhpcyBwcm9qZWN0IGFzIGEgcm9sZSBhcyBQcm9kdWNlciwgSSBmZWVsIGl0IGlzIGFib3V0IHRoZSBzYW1lLiBBbHRob3VnaCB3ZSBkb24ndCBoYXZlIGEgY2xpZW50LCB0aGUgcHJlc3N1cmUgaXMgZnJvbSBteSBwZWVycy4gVGhlIHRhc2sgaXMgdG8gY3JlYXRlIGEgdGFuZ2libGUsIG1hbmFnZWFibGUgdGltZSBwbGFuLiBBbHRob3VnaCB3ZSBkb24ndCBoYXZlIHRvIGFjdHVhbGx5IG1ha2UgdGhpbmdzIHJlYWwsIGl0IGRvZXMgc2VlbSB2ZXJ5IGNoYW5uZWxpbmcuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT3V0c2lkZSBhcyBQcm9kdWNlciwgSSB0b29rIHNvbWUgam9icyBhcyBhIGRlc2lnbmVyLiBJIGRvbid0IHdhbnQgdG8gc291bmQgY29ja3ksIGJ1dCBJIGFtIGNvbmZpZGVudCB0aGF0IEkgY291bGQgbWFrZSBzbGlkZXMgbG9va3MgbmljZS4gU28gd2hlbiBhbGwgb2YgbXkgZ3JvdXAgbWVtYmVycyBqdXN0IGxheSB0aGUgY29udGVudCBmbGF0IGFzIHRleHQsIEkgd2VudCBiYWNrIGFuZCBwaWNrZWQgdXAgZXZlcnl0aGluZyB0byBtYWtlIHN1cmUgaXQgaGFzIHVuaXF1ZSBhbmQgdW5pZm9ybSB2aXN1YWwgc2V0dGluZ3MuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSSBhbHNvIGRyYXcgdGhlIGlsbHVzdHJhdGlvbiBvZiB0aGUgYmxhY2sgY2F0IG9uIG15IGlQYWQgd2l0aCBQcm9jcmVhdGUuIEkgZW5qb3llZCBkb2luZyB0aGlzIGRpZ2l0YWwgYXJ0IGZvciBteSBncm91cCwgYWxzbyBhcyBhIGdlbmVyYWwgZGVzaWduIHByYWN0aWNlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lyd2luY2h5aS9pbWdiZWQvbWFzdGVyL2ltZy9JTUdfNjIxMzlCMUQ3RTE0LTEuanBlZyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGaW5hbGx5LCBiYWNrIHRvIHRoZSBtYWluIHRvcGljLiBPdXIgdGltZWxpbmUgaGFzIGJlZW4gc2VwYXJhdGVkIGFzIGZvciBkaWZmZXJlbnQgcGhhc2VzOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkJyYWluc3Rvcm1pbmcsIE5hcnJhdGl2ZSwgRm91bmRhdGlvbiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiR2F0aGVyaW5nIEFydCBBc3NldHMgYW5kIHNldHRpbmcgdGhlIGdhbWUgbG9naWNzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJQcm9kdWN0aW9uIGFuZCBEZXZlbG9wbWVudCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiR2FtZSBSZWxlYXNlIGFuZCBNYXJrZXRpbmciKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lyd2luY2h5aS9pbWdiZWQvbWFzdGVyL2ltZy8yMDIwMTAwNjAxMjUxNy5wbmciLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkVhY2ggcGhhc2UgYW5kIGluZGl2aWR1YWwgd2Vla2x5IHRpbWVsaW5lOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaXJ3aW5jaHlpL2ltZ2JlZC9tYXN0ZXIvaW1nLzIwMjAxMDA2MDEyNzQxLnBuZyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiB0aGUgZW5kLCBJIGFsc28gYWRkZWQgdGhlIHBsYXRmb3JtIHdlIHdpbGwgYmUgcmVsZWFzaW5nIG91ciBwcm9kdWN0IHRv4oCUZXhtYXBsZSBsaWtlIE9jdWx1cyBTdG9yZSBhbmQgUFNWUiBTdG9yZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvMjAyMDEwMDYwMTI4MTAucG5nIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNoZXN0ZXIgam9pbmVkIG91ciBncm91cCBtZWV0aW5nOyBpdCdzIHZlcnkgZWFybHkgaW4gdGhlIG1vcm5pbmcgaW4gQ2hpbmEuIEkgdmVyeSBtdWNoIGFwcHJlY2lhdGUgaGlzIGVmZm9ydHMuIChJIGRlZmluaXRlbHkgY2FuJ3QgZ2V0IHVwIHRoYXQgZWFybHkpIEkgcmVjb3JkZWQgdGhlIFpvb20gbWVldGluZyBhbmQgY3JvcHBlZCB0aGUgdmlkZW8gYWJvdXQgaGltIGV4cGxhaW5pbmcgdGhlIGlkZWEgYXMgYSBwcm9ncmFtbWVyLiBUaGlzIHZpZGVvIHdpbGwgYmUgcGxheWVkIGR1cmluZyBvdXIgcHJlc2VudGF0aW9ucy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPdXIgZ3JvdXAgZGlkIGFuIGFtYXppbmcgam9iIGFuZCBjYW1lIHVwIHdpdGggYW4gYW1hemluZyBpZGVhLiBJIGFtIHZlcnkgZXhjaXRlZCBhYm91dCB0aGUgcHJlc2VudGF0aW9uIHRvbW9ycm93fiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInBvc3QtcHJlc2VudGF0aW9uLXJlZmVjdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcG9zdC1wcmVzZW50YXRpb24tcmVmZWN0aW9uIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUG9zdCBQcmVzZW50YXRpb24gUmVmZWN0aW9uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZm92LW1vZGlmaWNhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZm92LW1vZGlmaWNhdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZPViBNb2RpZmljYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCZWZvcmUgdGhlIHByZXNlbnRhdGlvbiwgd2Ugbm90aWNlZCBvdXIgZ3JvdXAgbWlzc2VkIHRoZSBhY2Nlc3NpYmlsaXR5IGNoYW1waW9uLiBJdCBtZWFucyBvdXIgY29udGVudCBsYWNrcyB0aGUgYWNjZXNzaWJpbGl0eSBjb250ZW50LiBNZSBhcyB0aGUgcHJvZHVjZXIsIEkgdGFsa2VkIHdpdGggbXkgZ3JvdXAgbWVtYmVycyBpbW1lZGlhdGVseS4gV2Ugc3RhcnRlZCBicmFpbnN0b3JtaW5nIGFib3V0IGEgZmV3IHdheXMgdG8gbWFrZSB0aGUgZ2FtZSBtb3JlIGFjY2Vzc2libGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWZ0ZXIgdGhlIHByZXNlbnRhdGlvbiwgd2UgcmVjZWl2ZWQgZmVlZGJhY2sgZnJvbSB0aGUgY2xhc3NtYXRlLiBUaGV5IG1lbnRpb25lZCB3ZSBkaWQgYSB2ZXJ5IHRob3JvdWdoIHJlc2VhcmNoIGFib3V0IHRoZSBhY2Nlc3NpYmlsaXR5LiBIb25lc3RseSwgdGhhdCBwYXJ0IHdhcyBsYXN0LW1pbnV0ZSB3b3JrLCBidXQgdGhvc2UgY2FtZSBmcm9tIG15IHVuZGVyZ3JhZHVhdGUgdGhlc2lzIGFuZCByZXNlYXJjaCBhYm91dCB0aGUgRk9WIGFuZCBob3cgdG8gcmVkdWNlIG1vdGlvbiBzaWNrbmVzcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJIHBlcnNvbmFsbHkgYmVpbmcgaW1wYWN0IGJ5IG1vdGlvbiBzaWNrbmVzcyBhIGxvdC4gVGhlIG9ubHkgZ2FtZSBJIGFtIG5vdCB0aGF0IHNpY2sgaXMgQmVhdCBTYWJlci4gVGhlcmUgaXMgbm8gZGlyZWN0IG1vdmVtZW50LiBUaGF0IG1ha2VzIHRoZSBnYW1lIGZyaWVuZGx5IGZvciBtb3N0IGZpcnN0LXRpbWUgVlIgdXNlcnMuIEkgcmVhZCBvbmUgcGFwZXIgd3JvdGUgYnkgQWpveSBTIEZlcm5hbmRlcyBhbmQgU3RldmVuIEsgRmVpbmVyIGFib3V0IHVzaW5nIEZPViB0byByZWR1Y2UgbW90aW9uIHNpY2tuZXNzLiBUaGV5IGJvdGggYXJlIHByb2Zlc3NvcnMgYXQgQ29sdW1iaWEgRW5naW5lZXJpbmcuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaWZyYW1lIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICB3aWR0aDogIjU2MCIsCiAgICAgICAgICBoZWlnaHQ6ICIzMTUiLAogICAgICAgICAgc3JjOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvbEh6Q21mdUpZYTQiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93OgogICAgICAgICAgICAiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIsCiAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46ICIiCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGV5IHV0aWxpemVkIHNvZnQtZWRnZSBjdXQtb3V0LCB3aXRoIDMwIHBhcnRpY2lwbGVzIGFuZCBzZXBhcmF0ZWQgdGhlbSBpbnRvIHRoZSBBL0IgZ3JvdXAsIHByb3ZlZCB0aGF0IGl0IGNvdWxkIHJlZHVjZSBtb3Rpb24gc2lja25lc3MuIFRoZSBwYXJ0aWNpcGxlcyByZXBvcnRlZCB3aWxsaW5nbHkgdG8gZW5hYmxlIHRoZSBzb2Z0LWVkZ2UgY3V0IG91dCBpbiB0aGF0IHJlc2VhcmNoLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIkZpZ2h0aW5nIFZpcnR1YWwgUmVhbGl0eSBTaWNrbmVzcyAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmVuZ2luZWVyaW5nLmNvbHVtYmlhLmVkdS9uZXdzL2ZpZ2h0aW5nLXZpcnR1YWwtcmVhbGl0eS1zaWNrbmVzcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuZW5naW5lZXJpbmcuY29sdW1iaWEuZWR1L25ld3MvZmlnaHRpbmctdmlydHVhbC1yZWFsaXR5LXNpY2tuZXNzIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJtb3JlLXdheXMtdG8taW50ZXJhY3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI21vcmUtd2F5cy10by1pbnRlcmFjdCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE1vcmUgd2F5cyB0byBJbnRlcmFjdCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBtb3N0IHVud2FudGVkIHRoaW5nIHRvIGRvIGluIHZpcnR1YWwgcmVhbGl0eSBpcyB0byB0eXBlIHlvdXIgcGFzc3dvcmQuIFNvbWUgdXNlcnMgbWlnaHQgaGF2ZSBhbiBlYXN5IHBhc3N3b3JkLCBidXQgSSBoYXZlIGEgcGFzc3dvcmQgZ2VuZXJhdGVkIGJ5IHRoZSBwYXNzd29yZCBtYW5hZ2VyLiBJdCB1c3VhbGx5IGNvbnRhaW5zIDE2IGRpZ2l0YWxzIHdpdGggYm90aCB1cHBlciBhbmQgbG93ZXIgY2FzZSBzcGVjaWFsIGNoYXJhY3RlcnMuIEl0IGZlZWxzIGFzIGhhcmQgYXMgdXNpbmcgYSBST0tVIHJlbW90ZSB0byBpbnB1dCB5b3VyIHBhc3N3b3JkLlxuT3VyIHRlYW0gd2lzaGVzIHRvIGV4cGxvcmUgbW9yZSB3YXlzIHRvIGludGVyYWN0IHdpdGggZ2FtZSBvYmplY3RzIGluIHZpcnR1YWwgcmVhbGl0eSBzZXR0aW5ncyBieSBhZGRpbmcgYmFjayB0aGUgdHJhZGl0aW9uYWwgY29udHJvbGxlciBpbmNsdXNpdmVseS5cblhib3ggQWRhcHRpdmUgQ29udHJvbGxlciBpcyB0aGUgZmlyc3QgbWFqb3IgZ2FtaW5nIHN5c3RlbSBkZXNpZ25lZCBmb3IgcGVvcGxlIHdpdGggZGlzYWJpbGl0aWVzLiBPdXIgYXBwcm9hY2ggdG8gYWRhcHRpdmUgYWxsIGRpZmZlcmVudCBjb250cm9sbGVycyBvbiB0aGUgbWFya2V0IGFsbG93cyB1c2VycyB0byBpbnRlcmFjdCB3aXRoIHRoZSBnYW1lIGluIHRoZSB3YXlzIHRoZXkgYXJlIGZhbWlsaWFyIHdpdGguXG5UaGUgZ2FtZSBwcm9ncmFtbWluZyBkZXNpZ24gd2lsbCBhbGxvdyB1c2VycyB0byByZW1hcCBkaWZmZXJlbnQgY29udHJvbHMgdG8gdXRpbGl6ZSBkaWZmZXJlbnQga2V5IG1hcHMuIFRoZXkgY2FuIGNvbnRyb2wgdGhlIGJsYWNrIGNhdCB1c2luZyBhIGtleWJvYXJkIGFzIHdlbGwgYXMgWGJveCBBZGFwdGl2ZSBDb250cm9sbGVyLiIKICAgICAgICApCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}