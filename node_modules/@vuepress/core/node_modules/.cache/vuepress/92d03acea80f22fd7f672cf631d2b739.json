{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week4.md?vue&type=template&id=65da3235&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week4.md","mtime":1601956848731},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1600070946946},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":1600070946945},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":1600070943655}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ3ZWVrLTQtdHJhbnNsYXRpbmctYWZmb3JkYW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3dlZWstNC10cmFuc2xhdGluZy1hZmZvcmRhbmNlcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdlZWsgNCBUcmFuc2xhdGluZyBBZmZvcmRhbmNlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZpbmFsLXJlc3VsdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ZpbmFsLXJlc3VsdHMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZpbmFsIFJlc3VsdHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvUDEwMTA0OTQuanBnIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInByb2Nlc3MiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Byb2Nlc3MiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBQcm9jZXNzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBpcyBhIHZlcnkgaW50ZXJlc3RpbmcgYXNzaWdubWVudCwgYW5kIEkgZW5qb3llZCBpdCB2ZXJ5IG11Y2guIEl0IGdpdmVzIG1lIGEgbmV3IHBlcnNwZWN0aXZlIHRvIHZpZXcgdGhlIHRoaW5ncyBJIHVzZWQgdmlydHVhbGx5IGV2ZXJ5IGRheSBhbmQgbWFrZSBpdCBkbyBzb21ldGhpbmcgdGFuZ2libGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUGFydCBvZiBteSBqb2IsIEkgaGF2ZSB0byBkZXRhaWwgd2l0aCAzRCByZW5kZXIgc29mdHdhcmUgbmFtZWQgQ2luZW1hIDRELiAzRCBkZXNpZ24gYW5kIHJlbmRlcmluZ3MgdXN1YWxseSB0YWtlIGEgaHVnZSBhbW91bnQgb2YgdGltZS4gU28gZm9yIGRhaWx5IDggaG91cnMgd29yaywgbWF5YmUgNyBob3VycyBJIHNwZW50IG9uIHRoaXMgc29mdHdhcmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hlbiBJIGxlYXJuZWQgYWJvdXQgdGhpcyBhc3NpZ25tZW50J3MgZGV0YWlsLCBJIGhhdmUgbm8gaGVzaXRhdGlvbiBidXQgdG8gY2hvb3NlIHRoaXMgc29mdHdhcmUuIEZvciBhIGNvdXBsZSBvZiByZWFzb25zOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJJIGxvdmUgdGhpcyBzb2Z0d2FyZSBiZWNhdXNlLi4uIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJFZmZpY2llbmN5LCB2ZXJ5IGVhc3kgdG8gbGVhcm4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSSBrbm93IGhvdyB0byB1c2UgaXQsIGFuZCB0aGlzIGlzIGhvdyBJIGZlZWQgbXlzZWxmIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJTb21ldGhpbmcgSSB1c2UgdmVyeSBvZnRlbiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkkgaGF0ZSB0aGlzIHNvZnR3YXJlIGJlY2F1c2UuLi4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkl0IGFsd2F5cyBjcnVzaGVzIHNvbWVob3ciKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkkgc3RpbGwgZG9uJ3Qga25vdyBob3cgdG8gdXNlIGl0OyBpdCB0YWtlcyBhIHZlcnkgbG9uZyBwcm9jZXNzIHRvIG1hc3RlciBpdCIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJTb21ldGhpbmcgSSB1c2UgdG9vIG9mdGVuIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJIHN0YXJ0ZWQgZHJhd2luZyBzdHVmZiBvbiB0aGUgc3RvY2sgcGFwZXJzLCB0aGUgYmFzaWMgbmF2aWdhdGlvbiBiYXIsIHRoZSBwcm9wZXJ0aWVzIHdpbmRvd3M7IEkgYW0gdHJ5aW5nIHRvIG1pbWljIHRoZSByZWFsIFVYIG9mIHRoaXMgc29mdHdhcmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWZ0ZXIgSSBmaW5pc2hlZCBtb3N0IHRoaW5ncyBJIG5lZWQgdG8gZHJhdywgSSBzdGFydGVkIHRvIG1ha2UgM0QgY3ViZXMgYW5kIG90aGVyIG9iamVjdHMuIEkgaGF2ZSBzZXJ2YWwgY3ViZXMsIG9uZSBjeWxpbmRlciwgb25lIHNwaGVyZSwgYW5kIG9uZSB0b3J1cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvSU1HXzI4MjcuanBnIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkN1YmVzIGFuZCBjeWxpbmRlcnMgYXJlIG5vdCB2ZXJ5IGNoYWxsZW5naW5nLiBUaGUgbW9zdCBkaWZmaWN1bHQgcGFydCBpcyB0aGUgc3BoZXJlIGFuZCB0b3J1cy4gU2luY2UgdGhvc2UgdHdvIGhhdmUgY3VydmVzLCBpdCdzIG5vdCBlYXN5IHRvIGRvIGl0IHVzaW5nIHN0b2NrIHBhcGVycy4gU28gSSBoYXZlIHRvIGN1dCB0aGUgcGFwZXIgaW50byBzbWFsbCBibG9ja3MgYW5kIGdsdWUgd2l0aCBzdGVwIGJ5IHN0ZXAuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaXJ3aW5jaHlpL2ltZ2JlZC9tYXN0ZXIvaW1nL0lNR18yODIzLmpwZyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGaW5hbGx5LCBJIGhhdmUgZXZlcnl0aGluZyByZWFkeTsgSSB1c2UgRGVudGFsIEZsb3NzIHRvIGhhbmcgZXZlcnl0aGluZyB1bmRlcm5lYXRoIHRoZSBraXRjaGVuIGNvdW50ZXJ0b3AuIEl0IHNvdW5kcyB2ZXJ5IGVhc3kgYnV0IGFjdHVhbGx5IG5vdC4gSXQncyBoYXJkIHRvIHB1dCB0aGVtIGludG8gc29tZSBsZXZlbC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvUDEwMTA0ODguSlBHIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lyd2luY2h5aS9pbWdiZWQvbWFzdGVyL2ltZy9QMTAxMDQ5MC5KUEciLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSSB1c2VkIG15IERTTFIgc2hvdCBwaG90b3MgYW5kIHVzZWQgUGhvdG9zaG9wIHRvIHJlbW92ZSB0aGUgZGVudGFsIGZsb3NzLCBzbyB0aGUgaW1hZ2Ugd2lsbCBsb29rIGNsZWFuZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhvc2UgY3ViZXMsIG15IGluc3BpcmF0aW9uIGlzIGZyb20gTGVnb3MuIEkgd2FzIGEgaHVnZSBMZWdvIGZhbiB3aGVuIEkgd2FzIGEga2lkLCBhbmQgSSBzdGlsbCBsb3ZlIGl0LiBPciB0aGUgZ2FtZTogTWluZWNyYWZ0LiBUaGUgbGlua2FnZSBiZXR3ZWVuIHRob3NlIHR3bzogdGhlIGZ1bmRhbWVudGFsIHRoaW5nIG9mIG9uZSAzRCBvYmplY3RzIGFyZSBsaXR0bGUgY3ViZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaXJ3aW5jaHlpL2ltZ2JlZC9tYXN0ZXIvaW1nL1AxMDEwNDkyLkpQRyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOb3cgd2UgaGF2ZSAzRCBwcmludGVycywgYW5kIHdlIGNhbiBwcmludCAzRCBzdHVmZiBlYXNpbHkuIEJ1dCBpZiB0aGVyZSBpcyAzRCBzb2Z0d2FyZSBpbiB0aGUgVlIgaGVhZHNldCwgd2lsbCBpdCBsb29rcyBzb21ldGhpbmcgbGlrZSB0aGlzPyIKICAgICAgICApCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}